
# PODNAME: Text::Parser::ExAWK::Manual - manual for ExAWK (extended AWK) syntax

=head1 SYNOPSIS

    # Basic syntax summary:
    # ======================
    # One of 'if' or 'do' must be supplied. 'name' is optional.
    # awk-style variables may be used in the code for 'if' and 'do'.
    #   You could use $1, $2, $3 etc., to get the fields in order like in AWK.
    #   You could also use ${-1}, ${-2}, etc., to access fields from the last. This goes beyond AWK.
    #   $0 is the whole line. $_ is also set as the whole line, to ease regex matches.
    #   $this is a special variable which points to the Text::Parser object.
    #
    # Note that the language of the 'if' and 'do' strings is not AWK, but follows Perl only
    # $1, ${-1}, and $0 etc., are replaced by appropriate Perl expressions like
    # $this->field(0), $this->field(-1), and $this->this_line respectively,
    # and then evaluated.

    package TaxPayersParser;

    use Moose;
    extends 'Text::Parser';

    use Text::Parser::ExAWK;

    # Forms a new record
    awk_style_rule name => 'read_name', if => '$1 eq "NAME:"',
        do => 'my (@fld) = $this->field_range(1, -1);
               return {name => "@fld"};';

    # Adds data to the last record
    awk_style_rule name => 'read_address', if => '$1 eq "ADDRESS:"',
        do => 'my (@fld) = $this->field_range(1, -1);
               my $last=$this->pop_record(); 
               $last->{address} = "@fld"; 
               return $last;';

    # 'name' is only an optional parameter. When not specified
    # it will be autogenerated.
    awk_style_rule if => '$1 eq "TAX-PAYER-IDENTIFICATION:"', 
        do => 'my $last = $this->pop_record;
               $last->{tax_payer_id} = $2;
               return $last;';

    # If 'do' is specified, then 'if' is an optional condition. If no
    # 'if' condition is specified, the rule will be executed always
    awk_style_rule do => 'return $this->pop_record;';

    # If 'if' conditional is specified, and 'do' is not specified, then
    # the implied meaning is that the whole line is returned as a string
    # and it will be stored as a record.
    awk_style_rule if => '$1 eq "THIS WILL NEVER MATCH"';

    # One could avoid saving a record by using the option 'dont_record'
    # Here is an example of the comment character #
    awk_style_rule if => '$1 =~ /^#/', dont_record => 1;

    # Sometimes it is useful to make a parser state variable. For example,
    # suppose we want to keep track of the number of retirees.
    awk_style_rule if => '$1 eq "RETIRED:" and $2 eq "Y"',
        do => '$this->_is_retired;', dont_record => 1;

    has retired_people => (
        is          => 'rw', 
        isa         => 'Int', 
        default     => 0, 
        init_arg    => undef, 
        lazy        => 1, 
        traits      => ['Counter'], 
        handles     => {
            _is_retired => 'inc', 
        }, 
    );
    # In the above rule, the 'do' block is executed, but the return value
    # of the $this->_is_retired is not saved as a record. If the 'dont_record'
    # option were not set, then an integer record of the number of retirees
    # so far will be saved every time the RETIRED: Y is encountered.



=cut

