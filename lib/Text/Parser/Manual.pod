
# PODNAME: Text::Parser::Manual

# ABSTRACT: A manual for the Text::Parser class

=head1 INTRODUCTION

=head2 MOTIVATION

Text parsing is perhaps the single most common thing that almost every Perl program does. Yet we don't have a lean, flexible, text parsing utility. Ideally, the developer should only have to specify the "grammar" of the text file she intends to parse. Everything else, like C<open>ing a file handle, C<close>ing the file handle, tracking line-count, joining continued lines into one, reporting any errors in line continuation, trimming white space, splitting each line into fields, etc., should be automatic.

Unfortunately however, most file parsing code looks like this:

    open FH, "<$fname";
    my $line_count = 0;
    while (<FH>) {
        $line_count++;
        chomp;
        $_ = trim $_;  ## From String::Util
        my (@fields) = split /\s+/;
        # do something for each line ...
    }
    close FH;

Note that a developer may have to repeat all of the above if she has to read another file with different content or format. And if the target text format allows line-wrapping with a continuation character, it isn't easy to implement it well with the above C<while> loop. Furthermore, the part that is not shown in the above code C<# do something for each line ...> can actually be quite complex with several cascading if-else blocks.

    if ($fields[0] eq 'NAME:') {
        # something
    } elsif ($fields[0] eq 'ADDRESS:') {
        # something else
    } elsif ($fields[0] eq 'EMAIL:') {
    .
    .
    .
    } else {
        # finally!
    }

There are several problems with this code:

=for :list
* Hard to refactor and simplify into small functions (See Clean Code).
* Complex conditions are harder to write and often result in nested conditions.
* Cannot be easily modified slightly and re-used for another very similar text format.
* Documenting code in the while loop can get rather hairy.

=head2 VISION

What if:

=for :list
* a utility took care of all the "mundane" boilerplate like C<open>, C<close> etc.?
* parsing line-wrapped files were as simple as writing a small function that joins lines to unwrap?
* data extraction could be done with a set of self-explanatory rules that follow AWK-like syntax?
* the resulting code "reads like well-written prose" (-Bjarnes Stroustrup)?
* developers could easily extend a text parser written by one developer?

L<Text::Parser> can help you accomplish all of these and more!

The programmer needs to specify a set of parsing rules which look quite like AWK. And the rest is all taken care of. So now, a programmer need only focus on the grammar of the file they intend to parse.

=head1 CHAPTERS

This manual is divided into chapters:

=for :list
* L<Text::Parser::Manual::ComparingWithNativePerl> - this chapter should explain why one should consider using L<Text::Parser> instead of native Perl.
* L<Text::Parser::Manual::ExtendedAWKSyntax> - this chapter outlines the syntax for the rules
* L<Text::Parser::Manual::ManagingComplexRules> - what if you have a complex text file and need to write several rules? This chapter shows how you could manage these elegantly in a separate class.
* L<Text::Parser::Manual::UsingParserStateVariables> - what if the target text file has two different sorts of format, and there is an indicator that points out when the format changes?
* L<Text::Parser::Manual::InheritingAndModifyingRules> - suppose someone else has written a parser to handle a specific text format. And your target text format is similar, and you'd like to leverage their work. But you have some differences? Is it possible to re-use their code without modifying the original functionality?

=head1 COMPARING WITH NATIVE PERL

To understand how L<Text::Parser> compares to the native Perl way of doing things, let's take a simple example and see how we would write code. Let's say we have a simple text file (F<info.txt>) with lines of information like this:

    NAME: Brian
    EMAIL: brian@webhost.net
    NAME: Darin Cruz
    EMAIL: darin123@yahoo.co.uk
    NAME: Elizabeth
    NAME: Audrey C. Miller
    EMAIL: aud@audrey.io

You have to write code that would parse this to create a data structure with all names and corresponding email addresses. How would do it?

=head2 Native Perl code

Here's an implementation in native Perl:

    open IN, "<info.txt";
    my @data = ();
    while(<IN>) {
        chomp;
        my (@field) = split /\s+/;
        if ($field[0] eq 'NAME:') {
            shift @field;
            push @data, { name => join(' ', @field) };
        } elsif($field[0] eq 'EMAIL:') {
            $data[-1]->{email} = $field[1];
        }
    }
    close IN;

=head2 With Text::Parser

Here's how you'd write the code with L<Text::Parser>.

    use Text::Parser;

    my $parser = Text::Parser->new();
    $parser->add_rule( if => '$1 eq "NAME:"', do => 'return ${2+}' );
    $parser->add_rule( if => '$1 eq "EMAIL:"', do => 'return $2' );
    $parser->read('info.txt');
    my (@data) = $parser->get_records();

That's it!

Notice how elegant the code looks. And most importantly, you could now use the same parser object (C<$parser>) to parse another text file with the same text format.

    $parser->read('another.txt');

With native Perl, you'd have to wrap all that C<while> loop into a function and then call it with the file name.

=head2 More complexity in the format

Now let's say that the file F<another.txt> has the email line changed and it looks like this instead:

    EMAIL ADDRESS: person@domain.net

Now, with native perl you'd have to 

=head2 Directly from your code

